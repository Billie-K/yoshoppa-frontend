/**
 * Produce the GraphQL query recommended for a full schema introspection.
 * Accepts optional IntrospectionOptions.
 */
export { getIntrospectionQuery } from 'apollo-upload-client/node_modules/graphql/utilities/getIntrospectionQuery';
export type {
  IntrospectionOptions,
  IntrospectionQuery,
  IntrospectionSchema,
  IntrospectionType,
  IntrospectionInputType,
  IntrospectionOutputType,
  IntrospectionScalarType,
  IntrospectionObjectType,
  IntrospectionInterfaceType,
  IntrospectionUnionType,
  IntrospectionEnumType,
  IntrospectionInputObjectType,
  IntrospectionTypeRef,
  IntrospectionInputTypeRef,
  IntrospectionOutputTypeRef,
  IntrospectionNamedTypeRef,
  IntrospectionListTypeRef,
  IntrospectionNonNullTypeRef,
  IntrospectionField,
  IntrospectionInputValue,
  IntrospectionEnumValue,
  IntrospectionDirective,
} from 'apollo-upload-client/node_modules/graphql/utilities/getIntrospectionQuery';
/** Gets the target Operation from a Document. */
export { getOperationAST } from 'apollo-upload-client/node_modules/graphql/utilities/getOperationAST';
/** Gets the Type for the target Operation AST. */
export { getOperationRootType } from 'apollo-upload-client/node_modules/graphql/utilities/getOperationRootType';
/** Convert a GraphQLSchema to an IntrospectionQuery. */
export { introspectionFromSchema } from 'apollo-upload-client/node_modules/graphql/utilities/introspectionFromSchema';
/** Build a GraphQLSchema from an introspection result. */
export { buildClientSchema } from 'apollo-upload-client/node_modules/graphql/utilities/buildClientSchema';
/** Build a GraphQLSchema from GraphQL Schema language. */
export { buildASTSchema, buildSchema } from 'apollo-upload-client/node_modules/graphql/utilities/buildASTSchema';
export type { BuildSchemaOptions } from 'apollo-upload-client/node_modules/graphql/utilities/buildASTSchema';
/** Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST. */
export { extendSchema } from 'apollo-upload-client/node_modules/graphql/utilities/extendSchema';
/** Sort a GraphQLSchema. */
export { lexicographicSortSchema } from 'apollo-upload-client/node_modules/graphql/utilities/lexicographicSortSchema';
/** Print a GraphQLSchema to GraphQL Schema language. */
export {
  printSchema,
  printType,
  printIntrospectionSchema,
} from 'apollo-upload-client/node_modules/graphql/utilities/printSchema';
/** Create a GraphQLType from a GraphQL language AST. */
export { typeFromAST } from 'apollo-upload-client/node_modules/graphql/utilities/typeFromAST';
/** Create a JavaScript value from a GraphQL language AST with a type. */
export { valueFromAST } from 'apollo-upload-client/node_modules/graphql/utilities/valueFromAST';
/** Create a JavaScript value from a GraphQL language AST without a type. */
export { valueFromASTUntyped } from 'apollo-upload-client/node_modules/graphql/utilities/valueFromASTUntyped';
/** Create a GraphQL language AST from a JavaScript value. */
export { astFromValue } from 'apollo-upload-client/node_modules/graphql/utilities/astFromValue';
/** A helper to use within recursive-descent visitors which need to be aware of the GraphQL type system. */
export { TypeInfo, visitWithTypeInfo } from 'apollo-upload-client/node_modules/graphql/utilities/TypeInfo';
/** Coerces a JavaScript value to a GraphQL type, or produces errors. */
export { coerceInputValue } from 'apollo-upload-client/node_modules/graphql/utilities/coerceInputValue';
/** Concatenates multiple AST together. */
export { concatAST } from 'apollo-upload-client/node_modules/graphql/utilities/concatAST';
/** Separates an AST into an AST per Operation. */
export { separateOperations } from 'apollo-upload-client/node_modules/graphql/utilities/separateOperations';
/** Strips characters that are not significant to the validity or execution of a GraphQL document. */
export { stripIgnoredCharacters } from 'apollo-upload-client/node_modules/graphql/utilities/stripIgnoredCharacters';
/** Comparators for types */
export {
  isEqualType,
  isTypeSubTypeOf,
  doTypesOverlap,
} from 'apollo-upload-client/node_modules/graphql/utilities/typeComparators';
/** Asserts that a string is a valid GraphQL name */
export { assertValidName, isValidNameError } from 'apollo-upload-client/node_modules/graphql/utilities/assertValidName';
/** Compares two GraphQLSchemas and detects breaking changes. */
export {
  BreakingChangeType,
  DangerousChangeType,
  findBreakingChanges,
  findDangerousChanges,
} from 'apollo-upload-client/node_modules/graphql/utilities/findBreakingChanges';
export type { BreakingChange, DangerousChange } from 'apollo-upload-client/node_modules/graphql/utilities/findBreakingChanges';
/** Wrapper type that contains DocumentNode and types that can be deduced from it. */
export type { TypedQueryDocumentNode } from 'apollo-upload-client/node_modules/graphql/utilities/typedQueryDocumentNode';
